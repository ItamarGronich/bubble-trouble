{"version":3,"sources":["physics.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,YAAa;;;;AAIvB,QAAI,QAAQ,GAAR;QACA,eAAe,MAAM,KAAN;;;;;;;;;;AALI,aAgBd,oBAAT,CAA8B,IAA9B,EAAmC;AAC/B,YAAI,OAAO,OAAO,CAAP;YACP,SAAS,KAAK,GAAL,CAAS,IAAT,IAAiB,CAAjB,CAFkB;AAG/B,YAAG,CAAC,IAAD,EAAO;AAAC,kBAAM,IAAI,SAAJ,CAAc,uBAAd,CAAN,CAAD;SAAV;AACA,eAAO,SAAS,KAAT,CAJwB;KAAnC;;AAOA,aAAS,sBAAT,CAAgC,IAAhC,EAAsC;AAClC,YAAI,QAAQ,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,IAAT,CAAT,EAAyB,CAAzB,IAA8B,KAA9B,CADsB;AAElC,gBAAQ,GAAR,CAAY,KAAZ,EAFkC;AAGlC,eAAO,KAAP,CAHkC;KAAtC;;;;;;;;;AAvBuB,aAoCd,OAAT,CAAiB,mBAAjB,EAAqC;AACjC,eAAO,sBAAsB,IAAtB,CAD0B;KAArC;;;;;;;;AApCuB,aA8Cd,MAAT,CAAgB,CAAhB,EAAmB;AACf,eAAO,IAAI,CAAJ,CADQ;KAAnB;;;;;;;;;;;;;;;;;;;;;AA9CuB,aAqEd,gBAAT,CAA0B,YAA1B,EAAwC,mBAAxC,EAA6D;AACzD,YAAI,OAAO,QAAQ,mBAAR,CAAP,CADqD;AAEzD,eAAO,YAAE,GAAgB,IAAhB,GAA2B,MAAC,CAAO,IAAP,IAAe,YAAf,GAAgC,CAAjC,CAFqB;KAA7D;;;;;;;;;;;;;;;;;;;;;;AArEuB,aA8Fd,kBAAT,CAA4B,YAA5B,EAA0C,mBAA1C,EAA8D;AAC1D,YAAI,OAAO,QAAQ,mBAAR,CAAP,CADsD;AAE1D,eAAQ,eAAgB,IAAhB,CAFkD;KAA9D;;AAKA,WAAO;AACH,0BAAkB,gBAAlB;AACA,4BAAoB,kBAApB;AACA,8BAAsB,oBAAtB;AACA,gCAAyB,sBAAzB;KAJJ,CAnGuB;CAAZ,EAAX","file":"physics-compiled.js","sourcesContent":["var physics = (function () {\n/*============================================\n             physics rules\n==============================================*/\n    var ratio = 100,\n        gravityConst = 9.8 * ratio; // second number is pixel to meter tario and can be tampered with for different results\n\n\n    /**\n     * function to calculate the initial vertical speed for objects depending on their mass.\n     *\n     * @param size {Number} - the mass of the current object. should be a small integer\n     *        staring at 1.\n     *\n     * @returns {number} - The initial vertical speed\n     */\n    function initialVerticalSpeed(size){\n        var mass = size / 2,\n            moment = Math.log(size) + 2;\n        if(!mass) {throw new TypeError('mass argument missing')}\n        return moment * ratio;\n    }\n\n    function initialHorizontalSpeed(size) {\n        var speed = Math.min(Math.log(size), 4) * ratio;\n        console.log(speed);\n        return speed;\n    }\n\n    /**\n     * function that expresses a high resolution DOM time stamp\n     * in seconds rather than milliseconds.\n     *\n     * @param DOMHighResTimeStamp\n     * @returns {number} seconds that have passed from start of animation.\n     */\n    function seconds(DOMHighResTimeStamp){\n        return DOMHighResTimeStamp / 1000;\n    }\n\n    /**\n     * a simple function that takes a number and returns\n     * a square of that number\n     * @param n {number}\n     * @returns {number}\n     */\n    function square(n) {\n        return n * n;\n    }\n\n    /**\n     * function that calculates the vertical distance a gravity\n     * dependant object should travel from his current position\n     *\n     * the function is correspondent to the Calculation of\n     * distance with constant acceleration formula in basic\n     * mechanical  physics :\n     *\n     * S = V(i)t + 1/2at^2\n     *\n     * @param initialSpeed - {Number} the speed (vertical) the object is\n     *        currently traveling on.\n     *\n     * @param DOMHighResTimeStamp  - {DOMHighResTimeStamp}\n     *        timeStamp generated by the window.requestAnimationFrame();.\n     *\n     * @returns {number} the vertical distance a gravity dependant\n     *          object should travel from his current position\n     */\n    function verticalDistance(initialSpeed, DOMHighResTimeStamp) {\n        var time = seconds(DOMHighResTimeStamp);\n        return ( initialSpeed  * time ) + ( (square(time) * gravityConst ) / 2 );\n    }\n\n    /**\n     * function that calculates the horizontal distance traveled\n     * by an object with constant horizontal speed from his\n     * current position.\n     *\n     * The function is correspondent to the Calculation of\n     * distance with constant speed formula in basic\n     * mechanical  physics :\n     *\n     * S = vt\n     *\n     * @param initialSpeed - {Number} the speed (horizontal) the object is\n     *        currently traveling on.\n     *\n     * @param DOMHighResTimeStamp  - {DOMHighResTimeStamp}\n     *        timeStamp generated by the window.requestAnimationFrame();.\n     *\n     * @returns {number} the horizontal speed an object\n     *          should travel from his current position.\n     */\n    function horizontalDistance(initialSpeed, DOMHighResTimeStamp){\n        var time = seconds(DOMHighResTimeStamp);\n        return  initialSpeed  * time;\n    }\n\n    return {\n        verticalDistance: verticalDistance,\n        horizontalDistance: horizontalDistance,\n        initialVerticalSpeed: initialVerticalSpeed,\n        initialHorizontalSpeed : initialHorizontalSpeed\n    }\n\n\n})();"]}